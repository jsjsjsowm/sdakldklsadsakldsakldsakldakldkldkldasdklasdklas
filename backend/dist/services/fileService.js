"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileService = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
class FileService {
    ensureDirectoryExists(dirPath) {
        if (!fs_1.default.existsSync(dirPath)) {
            fs_1.default.mkdirSync(dirPath, { recursive: true });
            console.log(`üìÅ Created directory: ${dirPath}`);
        }
    }
    async saveApplicationToFile(application) {
        try {
            // Create applications directory if it doesn't exist
            const applicationsDir = path_1.default.join(process.cwd(), 'applications');
            this.ensureDirectoryExists(applicationsDir);
            // Generate filename
            const timestamp = new Date().toISOString().replace(/:/g, '-').split('.')[0];
            const filename = `application_${application.id}_${timestamp}.txt`;
            const filepath = path_1.default.join(applicationsDir, filename);
            // Format categories
            const categories = [];
            if (application.categoryA)
                categories.push('A');
            if (application.categoryB)
                categories.push('B');
            if (application.categoryC)
                categories.push('C');
            if (application.categoryD)
                categories.push('D');
            const categoriesStr = categories.length > 0 ? categories.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ';
            // Format payment information
            let paymentText;
            if (application.paymentType === 'partial' && application.paidAmount && application.remainingAmount) {
                paymentText = `${application.paidAmount.toLocaleString()} ‚ÇΩ (30%, –æ—Å—Ç–∞—Ç–æ–∫ ${application.remainingAmount.toLocaleString()} ‚ÇΩ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)`;
            }
            else {
                paymentText = `${application.totalAmount.toLocaleString()} ‚ÇΩ (100%)`;
            }
            // Prepare application data
            const applicationData = `
=== –ó–ê–Ø–í–ö–ê ‚Ññ${application.id} ===
–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: ${application.createdAt.toLocaleString('ru-RU')}
IP –∞–¥—Ä–µ—Å: ${application.ipAddress}

=== –õ–ò–ß–ù–´–ï –î–ê–ù–ù–´–ï ===
–§–ò–û: ${application.fullName}
–ü–∞—Å–ø–æ—Ä—Ç: ${application.passportNumber}
–¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}

=== –í–´–ë–†–ê–ù–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò ===
${categoriesStr}

=== –î–û–ö–£–ú–ï–ù–¢–´ ===
–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞: ${application.hasMedical}
–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: ${application.hasSchool}

=== –û–ü–õ–ê–¢–ê ===
–¢–∏–ø –æ–ø–ª–∞—Ç—ã: ${application.paymentType === 'partial' ? '–ß–∞—Å—Ç–∏—á–Ω–∞—è (30%)' : '–ü–æ–ª–Ω–∞—è (100%)'}
–û–ø–ª–∞—á–µ–Ω–Ω–∞—è —Å—É–º–º–∞: ${paymentText}

=== –î–û–°–¢–ê–í–ö–ê ===
–°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: ${application.deliveryMethod || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: ${application.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

=== –§–ê–ô–õ–´ ===
–°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤: ${application.personalPhotoPath ? '–ó–∞–≥—Ä—É–∂–µ–Ω—ã' : '–ù–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã'}
–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ: ${application.personalPhotoPath ? path_1.default.basename(application.personalPhotoPath) : '–ù–µ—Ç —Ñ–∞–π–ª–∞'}
–ü–æ–¥–ø–∏—Å—å: ${application.signaturePath ? path_1.default.basename(application.signaturePath) : '–ù–µ—Ç —Ñ–∞–π–ª–∞'}
–ú–µ–¥. —Å–ø—Ä–∞–≤–∫–∞: ${application.medCertificatePath ? path_1.default.basename(application.medCertificatePath) : '–ù–µ—Ç —Ñ–∞–π–ª–∞'}

=== –°–¢–ê–¢–£–° ===
–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã: ${application.paymentStatus}
–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã: ${application.paymentConfirmed ? '–û–ø–ª–∞—á–µ–Ω–æ' : '–ù–µ –æ–ø–ª–∞—á–µ–Ω–æ'}
`;
            // Write to file
            fs_1.default.writeFileSync(filepath, applicationData, 'utf8');
            console.log(`‚úÖ Application ${application.id} saved to file: ${filepath}`);
            return filepath;
        }
        catch (error) {
            console.error(`‚ùå Error saving application to file:`, error);
            throw error;
        }
    }
    async listApplicationFiles() {
        const applicationsDir = path_1.default.join(process.cwd(), 'applications');
        if (!fs_1.default.existsSync(applicationsDir)) {
            return [];
        }
        const files = fs_1.default.readdirSync(applicationsDir)
            .filter(filename => filename.endsWith('.txt'))
            .map(filename => {
            const filepath = path_1.default.join(applicationsDir, filename);
            const stats = fs_1.default.statSync(filepath);
            return {
                filename,
                size: stats.size,
                created: stats.birthtime.toLocaleString('ru-RU'),
                modified: stats.mtime.toLocaleString('ru-RU'),
            };
        })
            .sort((a, b) => new Date(b.created).getTime() - new Date(a.created).getTime());
        return files;
    }
    async deleteApplicationFile(filename) {
        try {
            const applicationsDir = path_1.default.join(process.cwd(), 'applications');
            const filepath = path_1.default.join(applicationsDir, filename);
            if (fs_1.default.existsSync(filepath)) {
                fs_1.default.unlinkSync(filepath);
                console.log(`üóëÔ∏è Deleted file: ${filepath}`);
                return true;
            }
            return false;
        }
        catch (error) {
            console.error(`‚ùå Error deleting file:`, error);
            return false;
        }
    }
    async getApplicationFile(filename) {
        try {
            const applicationsDir = path_1.default.join(process.cwd(), 'applications');
            const filepath = path_1.default.join(applicationsDir, filename);
            if (fs_1.default.existsSync(filepath)) {
                return filepath;
            }
            return null;
        }
        catch (error) {
            console.error(`‚ùå Error getting file:`, error);
            return null;
        }
    }
    async clearAllFiles() {
        const applicationsDir = path_1.default.join(process.cwd(), 'applications');
        const uploadsDir = path_1.default.join(process.cwd(), 'uploads');
        // Clear applications directory
        if (fs_1.default.existsSync(applicationsDir)) {
            fs_1.default.rmSync(applicationsDir, { recursive: true, force: true });
            this.ensureDirectoryExists(applicationsDir);
        }
        // Clear uploads directory
        if (fs_1.default.existsSync(uploadsDir)) {
            fs_1.default.rmSync(uploadsDir, { recursive: true, force: true });
            this.ensureDirectoryExists(uploadsDir);
            this.ensureDirectoryExists(path_1.default.join(uploadsDir, 'signatures'));
            this.ensureDirectoryExists(path_1.default.join(uploadsDir, 'photos'));
            this.ensureDirectoryExists(path_1.default.join(uploadsDir, 'certificates'));
        }
        console.log('üóëÔ∏è All files cleared');
    }
}
exports.fileService = new FileService();
//# sourceMappingURL=fileService.js.map