import TelegramBot from 'node-telegram-bot-api';
import { config } from '../config/config';
import { Application } from '../models';

class TelegramService {
  private bot?: TelegramBot;
  private adminChatId?: string;

  constructor() {
    if (config.telegram.botToken && config.telegram.adminChatId) {
      this.bot = new TelegramBot(config.telegram.botToken, { polling: false });
      this.adminChatId = config.telegram.adminChatId;
      console.log('‚úÖ Telegram bot configured');
    } else {
      console.log('‚ö†Ô∏è Telegram bot not configured');
    }
  }

  async testBot(): Promise<boolean> {
    if (!this.bot || !this.adminChatId) {
      console.log('‚ùå Bot not configured');
      return false;
    }

    try {
      await this.bot.sendMessage(
        this.adminChatId,
        'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞!\n\n–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.',
        { parse_mode: 'HTML' }
      );
      console.log('‚úÖ Test message sent successfully');
      return true;
    } catch (error) {
      console.error('‚ùå Failed to send test message:', error);
      return false;
    }
  }

  async sendApplicationNotification(application: Application): Promise<void> {
    if (!this.bot || !this.adminChatId) {
      console.log('‚ö†Ô∏è Telegram bot not configured, skipping notification');
      return;
    }

    try {
      const message = this.formatApplicationMessage(application);
      
      await this.bot.sendMessage(this.adminChatId, message, {
        parse_mode: 'HTML',
      });

      console.log(`‚úÖ Telegram notification sent for application ${application.id}`);

      // Send files if available
      await this.sendApplicationFiles(application);
    } catch (error) {
      console.error(`‚ùå Failed to send Telegram notification for application ${application.id}:`, error);
    }
  }

  private formatApplicationMessage(application: Application): string {
    // Format categories
    const categories = [];
    if (application.categoryA) categories.push('A');
    if (application.categoryB) categories.push('B');
    if (application.categoryC) categories.push('C');
    if (application.categoryD) categories.push('D');

    // Format medical and school
    const medicalText = application.hasMedical === 'order' ? '–ó–∞–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' : '–ï—Å—Ç—å —Å–ø—Ä–∞–≤–∫–∞';
    const schoolText = application.hasSchool === 'no' ? '–ù–µ—Ç –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è' : '–ï—Å—Ç—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ';

    // Format payment information
    let paymentText;
    if (application.paymentType === 'partial' && application.paidAmount && application.remainingAmount) {
      paymentText = `${application.paidAmount.toLocaleString()} ‚ÇΩ (30%, –æ—Å—Ç–∞—Ç–æ–∫ ${application.remainingAmount.toLocaleString()} ‚ÇΩ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏)`;
    } else {
      paymentText = `${application.totalAmount.toLocaleString()} ‚ÇΩ (100%)`;
    }

    return `
üö® <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #${application.id}</b>

üìÖ <b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> ${application.createdAt.toLocaleString('ru-RU')}
üåê <b>IP –∞–¥—Ä–µ—Å:</b> ${application.ipAddress}

üë§ <b>–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:</b>
‚Ä¢ –§–ò–û: <code>${application.fullName}</code>
‚Ä¢ –ü–∞—Å–ø–æ—Ä—Ç: <code>${application.passportNumber}</code>
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: <code>${application.phone}</code>

üöó <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> ${categories.length > 0 ? categories.join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω—ã'}
üè• <b>–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:</b> ${medicalText}
üéì <b>–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ:</b> ${schoolText}

üí∞ <b>–û–ø–ª–∞—Ç–∞:</b> ${paymentText}

üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞:</b>
‚Ä¢ –°–ø–æ—Å–æ–±: ${application.deliveryMethod || '–ù–µ –≤—ã–±—Ä–∞–Ω'}
‚Ä¢ –ê–¥—Ä–µ—Å: ${application.deliveryAddress || '–ù–µ —É–∫–∞–∑–∞–Ω'}

üìé <b>–§–∞–π–ª—ã:</b>
‚Ä¢ –ü–æ–¥–ø–∏—Å—å: ${application.signaturePath ? '‚úÖ' : '‚ùå'}
‚Ä¢ –§–æ—Ç–æ: ${application.personalPhotoPath ? '‚úÖ' : '‚ùå'}
‚Ä¢ –ú–µ–¥. —Å–ø—Ä–∞–≤–∫–∞: ${application.medCertificatePath ? '‚úÖ' : '‚ùå'}
    `.trim();
  }

  private async sendApplicationFiles(application: Application): Promise<void> {
    if (!this.bot || !this.adminChatId) return;

    const baseUrl = config.frontendUrl.replace(/\/$/, '');

    try {
      // Send signature
      if (application.signaturePath) {
        const fileUrl = `${baseUrl}/uploads/${application.signaturePath}`;
        await this.bot.sendPhoto(this.adminChatId, fileUrl, {
          caption: '‚úçÔ∏è –ü–æ–¥–ø–∏—Å—å –∑–∞—è–≤–∏—Ç–µ–ª—è',
        });
      }

      // Send personal photo
      if (application.personalPhotoPath) {
        const fileUrl = `${baseUrl}/uploads/${application.personalPhotoPath}`;
        await this.bot.sendPhoto(this.adminChatId, fileUrl, {
          caption: 'üì∏ –§–æ—Ç–æ –∑–∞—è–≤–∏—Ç–µ–ª—è',
        });
      }

      // Send medical certificate
      if (application.medCertificatePath) {
        const fileUrl = `${baseUrl}/uploads/${application.medCertificatePath}`;
        await this.bot.sendDocument(this.adminChatId, fileUrl, {
          caption: 'üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞',
        });
      }
    } catch (error) {
      console.error('Error sending application files to Telegram:', error);
    }
  }
}

export const telegramService = new TelegramService();
